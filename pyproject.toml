[tool.poetry]
name = "dgi-toolkit"
version = "0.1.0"
description = ""
authors = ["rubendominguezfalcon <nabariho@gmail.com>"]
readme = "README.md"
packages = [{include = "dgi", from = "."}]

[tool.poetry.scripts]
dgi = "dgi.cli:app"

[tool.poetry.dependencies]
python = "^3.12"
pandas = "^2.3.1"
typer = {extras = ["all"], version = "^0.16.0"}
rich = "^14.0.0"
pydantic = "^2.0"
matplotlib = "^3.10.3"
langchain = "^0.3.26"
openai = "^1.97.1"
langchain-community = "^0.3.27"
langchain-openai = "^0.3.28"
langchain-anthropic = "^0.3.17"


[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
notebook = "^7.4.4"
pre-commit = "^4.2.0"
mypy = "^1.17.0"
pandas-stubs = "^2.3.0.250703"
black = {extras = ["jupyter"], version = "^25.1.0"}
ruff = "^0.4.4"
isort = "^6.0.1"
bandit = "^1.8.6"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py313']

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py313"

# Exclude notebooks and other non-standard Python files
exclude = [
    "notebooks/",
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",   # pycodestyle errors
    "E7",   # pycodestyle errors
    "E9",   # pycodestyle errors
    "F",    # Pyflakes
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "C4",   # flake8-comprehensions
    "PIE",  # flake8-pie
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
]

ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function calls in argument defaults
    "B905",   # zip() without an explicit strict= parameter
    "SIM117", # Combine multiple with statements
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["dgi"]
known_third_party = [
    "pandas",
    "pydantic",
    "typer",
    "rich",
    "langchain",
    "langchain_openai",
    "langchain_anthropic",
    "openai",
    "anthropic"
]

[tool.bandit]
exclude_dirs = ["tests", "notebooks"]
skips = ["B101", "B601"]  # Skip assert and shell injection tests

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/**"]

[tool.mypy]
python_version = "3.13"
strict = true
